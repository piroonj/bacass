process {

  cpus = { check_max( 2, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [1,143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'

  withLabel:'small'{
      cpus = { check_max( 2, 'cpus' ) }
      memory = { check_max( 1.GB * task.attempt, 'memory' ) }
      time = { check_max( 1.h * task.attempt, 'time' ) }
  }

  withLabel:'medium' {
      cpus = { check_max( 8, 'cpus' ) }
      memory = { check_max( 8.GB * task.attempt, 'memory' ) }
      time = { check_max( 8.h * task.attempt, 'time' ) }
  }

  withLabel:'large'{
      cpus = { check_max( 32, 'cpus' ) }
      memory = { check_max( 350.GB * task.attempt, 'memory' ) }
      time = { check_max( 160.h * task.attempt, 'time' ) }
  }

  withName:'quast'{
      cpus = { check_max( 2, 'cpus' ) }
      memory = { check_max( 1.GB * task.attempt, 'memory' ) }
      time = { check_max( 1.h * task.attempt, 'time' ) }
  }
  withName:'adapter_trimming'{
      cpus = { check_max( 12, 'cpus' ) }
      memory = { check_max( 32.GB * task.attempt, 'memory' ) }
      time = { check_max( 1.h * task.attempt, 'time' ) }
  }
  withName:'unicycler'{
      cpus = { check_max( 28, 'cpus' ) }
      memory = { check_max( 110.GB * task.attempt, 'memory' ) }
      time = { check_max( 72.h * task.attempt, 'time' ) }
  }

  withName:'dfast'{
      cpus = { check_max( 8, 'cpus' ) }
      memory = { check_max( 16.GB * task.attempt, 'memory' ) }
      time = { check_max( 8.h * task.attempt, 'time' ) }
      container = '/home/pjenjaroenpun/nextflow/nf-cores/bacass/sif/dfast-v1.2.6.sif'
  }

  withName:'medaka'{
      cpus = { check_max( 8, 'cpus' ) }
      memory = { check_max( 110.GB * task.attempt, 'memory' ) }
      time = { check_max( 24.h * task.attempt, 'time' ) }
      container = '/home/pjenjaroenpun/nextflow/nf-cores/bacass/sif/polish-v1.0.1.sif'
  }
  withName:'flye'{
      cpus = { check_max( 28, 'cpus' ) }
      memory = { check_max( 110.GB * task.attempt, 'memory' ) }
      time = { check_max( 72.h * task.attempt, 'time' ) }
  }

  params {
      // Defaults only, expecting to be overwritten
      max_memory = 110.GB
      max_cpus = 32
      max_time = 24.h
      igenomes_base = 's3://ngi-igenomes/igenomes/'
  }
}
